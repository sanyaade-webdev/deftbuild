? gdchart
Index: ximacfg.h
===================================================================
RCS file: /cvsroot/cximage/CxImage/ximacfg.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 ximacfg.h
26c26
< #define CXIMAGE_SUPPORT_TIF 1
---
> #define CXIMAGE_SUPPORT_TIF 0
34,38c34,38
< #define CXIMAGE_SUPPORT_JP2 1
< #define CXIMAGE_SUPPORT_JPC 1
< #define CXIMAGE_SUPPORT_PGX 1
< #define CXIMAGE_SUPPORT_PNM 1
< #define CXIMAGE_SUPPORT_RAS 1
---
> #define CXIMAGE_SUPPORT_JP2 0
> #define CXIMAGE_SUPPORT_JPC 0
> #define CXIMAGE_SUPPORT_PGX 0
> #define CXIMAGE_SUPPORT_PNM 0
> #define CXIMAGE_SUPPORT_RAS 0
Index: ximadef.h
===================================================================
RCS file: /cvsroot/cximage/CxImage/ximadef.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 ximadef.h
196a197,295
> typedef void* (*t_cx_malloc)( size_t size );
> extern "C" t_cx_malloc cximage_malloc;
> 
> typedef void* (*t_cx_calloc)( size_t num, size_t size );
> extern "C" t_cx_calloc cximage_calloc;
> 
> typedef void* (*t_cx_realloc)( void * ptr, size_t size );
> extern "C" t_cx_realloc cximage_realloc;
> 
> typedef void (*t_cx_free)( void *ptr );
> extern "C" t_cx_free cximage_free;
> 
> #ifndef CX_NEW
> #	define CX_NEW(__type) new ((__type*)cximage_malloc(sizeof(__type))) __type
> #endif
> #ifndef CX_DELETE
> #	define CX_DELETE(__ptr,__type) (__ptr?cximage_free((__ptr->~__type(),__ptr)):0)
> #endif
> #ifndef CX_MALLOC
> #	define CX_MALLOC(__sz) cximage_malloc(__sz)
> #endif
> #ifndef CX_CALLOC
> #	define CX_CALLOC(__num,__sz) cximage_calloc(__num,__sz)
> #endif
> 
> #ifdef CX_FORCE_CUSTOM_ALLOCATOR
> #	define malloc please_use_CX_MALLOC
> #	define calloc please_use_CX_CALLOC
> #	define free please_use_CX_DELETE
> #	define new please_use_CX_NEW
> #	define delete please_use_CX_DELETE
> #endif
> 
> typedef void* (*t_cx_malloc)( size_t size );
> extern "C" t_cx_malloc cximage_malloc;
> 
> typedef void* (*t_cx_calloc)( size_t num, size_t size );
> extern "C" t_cx_calloc cximage_calloc;
> 
> typedef void* (*t_cx_realloc)( void * ptr, size_t size );
> extern "C" t_cx_realloc cximage_realloc;
> 
> typedef void (*t_cx_free)( void *ptr );
> extern "C" t_cx_free cximage_free;
> 
> #ifndef CX_NEW
> #	define CX_NEW(__type) new ((__type*)cximage_malloc(sizeof(__type))) __type
> #endif
> #ifndef CX_DELETE
> #	define CX_DELETE(__ptr,__type) (__ptr?cximage_free((__ptr->~__type(),__ptr)):0)
> #endif
> #ifndef CX_MALLOC
> #	define CX_MALLOC(__sz) cximage_malloc(__sz)
> #endif
> #ifndef CX_CALLOC
> #	define CX_CALLOC(__num,__sz) cximage_calloc(__num,__sz)
> #endif
> 
> #ifdef CX_FORCE_CUSTOM_ALLOCATOR
> #	define malloc please_use_CX_MALLOC
> #	define calloc please_use_CX_CALLOC
> #	define free please_use_CX_DELETE
> #	define new please_use_CX_NEW
> #	define delete please_use_CX_DELETE
> #endif
> 
> typedef void* (*t_cx_malloc)( size_t size );
> extern "C" t_cx_malloc cximage_malloc;
> 
> typedef void* (*t_cx_calloc)( size_t num, size_t size );
> extern "C" t_cx_calloc cximage_calloc;
> 
> typedef void* (*t_cx_realloc)( void * ptr, size_t size );
> extern "C" t_cx_realloc cximage_realloc;
> 
> typedef void (*t_cx_free)( void *ptr );
> extern "C" t_cx_free cximage_free;
> 
> #ifndef CX_NEW
> #	define CX_NEW(__type) new ((__type*)cximage_malloc(sizeof(__type))) __type
> #endif
> #ifndef CX_DELETE
> #	define CX_DELETE(__ptr,__type) (__ptr?cximage_free((__ptr->~__type(),__ptr)):0)
> #endif
> #ifndef CX_MALLOC
> #	define CX_MALLOC(__sz) cximage_malloc(__sz)
> #endif
> #ifndef CX_CALLOC
> #	define CX_CALLOC(__num,__sz) cximage_calloc(__num,__sz)
> #endif
> 
> #ifdef CX_FORCE_CUSTOM_ALLOCATOR
> #	define malloc please_use_CX_MALLOC
> #	define calloc please_use_CX_CALLOC
> #	define free please_use_CX_DELETE
> #	define new please_use_CX_NEW
> #	define delete please_use_CX_DELETE
> #endif
> 
Index: ximage.cpp
===================================================================
RCS file: /cvsroot/cximage/CxImage/ximage.cpp,v
retrieving revision 1.2
diff -r1.2 ximage.cpp
7a8,88
> #if !defined( CXIMAGE_CUSTOM_ALLOCATOR )
> 
> #	ifdef CX_CUSTOM_MEMORY_ONLY
> #		undef malloc
> #		undef calloc
> #		undef free
> #		undef new
> #		undef delete
> #	endif
> 
> 	extern "C"
> 	{	t_cx_malloc cximage_malloc = malloc;
> 		t_cx_calloc cximage_calloc = calloc;
> 		t_cx_realloc cximage_realloc = realloc;
> 		t_cx_free cximage_free = free;
> 	};
> 
> #	ifdef CX_CUSTOM_MEMORY_ONLY
> #		define malloc please_use_CX_MALLOC
> #		define calloc please_use_CX_CALLOC
> #		define free please_use_CX_DELETE
> #		define new please_use_CX_NEW
> #		define delete please_use_CX_DELETE
> #	endif
> 
> #endif
> 
> #if !defined( CXIMAGE_CUSTOM_ALLOCATOR )
> 
> #	ifdef CX_CUSTOM_MEMORY_ONLY
> #		undef malloc
> #		undef calloc
> #		undef free
> #		undef new
> #		undef delete
> #	endif
> 
> 	extern "C"
> 	{	t_cx_malloc cximage_malloc = malloc;
> 		t_cx_calloc cximage_calloc = calloc;
> 		t_cx_realloc cximage_realloc = realloc;
> 		t_cx_free cximage_free = free;
> 	};
> 
> #	ifdef CX_CUSTOM_MEMORY_ONLY
> #		define malloc please_use_CX_MALLOC
> #		define calloc please_use_CX_CALLOC
> #		define free please_use_CX_DELETE
> #		define new please_use_CX_NEW
> #		define delete please_use_CX_DELETE
> #	endif
> 
> #endif
> 
> #if !defined( CXIMAGE_CUSTOM_ALLOCATOR )
> 
> #	ifdef CX_CUSTOM_MEMORY_ONLY
> #		undef malloc
> #		undef calloc
> #		undef free
> #		undef new
> #		undef delete
> #	endif
> 
> 	extern "C"
> 	{	t_cx_malloc cximage_malloc = malloc;
> 		t_cx_calloc cximage_calloc = calloc;
> 		t_cx_realloc cximage_realloc = realloc;
> 		t_cx_free cximage_free = free;
> 	};
> 
> #	ifdef CX_CUSTOM_MEMORY_ONLY
> #		define malloc please_use_CX_MALLOC
> #		define calloc please_use_CX_CALLOC
> #		define free please_use_CX_DELETE
> #		define new please_use_CX_NEW
> #		define delete please_use_CX_DELETE
> #	endif
> 
> #endif
> 
Index: ximapng.cpp
===================================================================
RCS file: /cvsroot/cximage/CxImage/ximapng.cpp,v
retrieving revision 1.2
diff -r1.2 ximapng.cpp
145c145
< 				pal[ip].rgbReserved=info_ptr->trans[ip];
---
> 				pal[ip].rgbReserved=info_ptr->trans_alpha[ip];
358c358
< 			info_ptr->trans = trans;
---
> 			info_ptr->trans_alpha = trans;
388c388
< 			info_ptr->trans = trans;
---
> 			info_ptr->trans_alpha = trans;
Index: ximatran.cpp
===================================================================
RCS file: /cvsroot/cximage/CxImage/ximatran.cpp,v
retrieving revision 1.2
diff -r1.2 ximatran.cpp
183c183
< 			div_r = div(y + dlineup, 8);
---
> 			div_r = div((int)(y + dlineup), 8);
301c301
< 			div_r = div(y, 8);
---
> 			div_r = div((int)y, 8);
