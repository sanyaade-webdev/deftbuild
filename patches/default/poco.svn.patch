diff -rupwN -x .svn ../dnl3/poco/Foundation/src/NumberFormatter.cpp poco/Foundation/src/NumberFormatter.cpp
--- ../dnl3/poco/Foundation/src/NumberFormatter.cpp	2011-05-25 15:33:13.250000000 -0400
+++ poco/Foundation/src/NumberFormatter.cpp	2011-05-25 14:27:03.921875000 -0400
@@ -373,7 +373,7 @@ void NumberFormatter::append(std::string
 	char buffer[24];
 #if defined(POCO_PTR_IS_64_BIT)
 	#if defined(POCO_LONG_IS_64_BIT)
-		std::sprintf(buffer, "%016lX", (UIntPtr) ptr);
+		std::sprintf(buffer, "%016lX", (UIntPtr)(unsigned long long) ptr);
 	#else
 		std::sprintf(buffer, "%016"I64_FMT"X", (UIntPtr) ptr);
 	#endif
diff -rupwN -x .svn ../dnl3/poco/Net/include/Poco/Net/MailMessage.h poco/Net/include/Poco/Net/MailMessage.h
--- ../dnl3/poco/Net/include/Poco/Net/MailMessage.h	2011-05-25 15:32:29.562500000 -0400
+++ poco/Net/include/Poco/Net/MailMessage.h	2011-05-25 15:22:26.750000000 -0400
@@ -161,6 +161,11 @@ public:
 	bool isMultipart() const;
 		/// Returns true iff the message is a multipart message.
 
+	void setPartHeader( const std::string& part, const std::string& name, const std::string& value);
+		/// Adds the specified name/value pair to the part headers
+		///
+		/// Passing an empty string as the value will delete the key
+
 	void addPart(const std::string& name, PartSource* pSource, ContentDisposition disposition, ContentTransferEncoding encoding); 
 		/// Adds a part/attachment to the mail message.
 		///
@@ -222,12 +227,14 @@ public:
 		/// consists only of ASCII characters.
 
 protected:
+	typedef std::map<std::string, std::string> StringMap;
 	struct Part
 	{
 		std::string             name;
 		PartSource*             pSource;
 		ContentDisposition      disposition;
 		ContentTransferEncoding encoding;
+		StringMap				headers;
 	};
 	typedef std::vector<Part> PartVec;
 
diff -rupwN -x .svn ../dnl3/poco/Net/src/HTTPChunkedStream.cpp poco/Net/src/HTTPChunkedStream.cpp
--- ../dnl3/poco/Net/src/HTTPChunkedStream.cpp	2011-05-25 15:32:32.343750000 -0400
+++ poco/Net/src/HTTPChunkedStream.cpp	2011-05-25 14:36:08.625000000 -0400
@@ -114,7 +114,7 @@ int HTTPChunkedStreamBuf::readFromDevice
 int HTTPChunkedStreamBuf::writeToDevice(const char* buffer, std::streamsize length)
 {
 	_chunkBuffer.clear();
-	NumberFormatter::appendHex(_chunkBuffer, length);
+	NumberFormatter::appendHex(_chunkBuffer, (int)length);
 	_chunkBuffer.append("\r\n", 2);
 	_chunkBuffer.append(buffer, static_cast<std::string::size_type>(length));
 	_chunkBuffer.append("\r\n", 2);
diff -rupwN -x .svn ../dnl3/poco/Net/src/MailMessage.cpp poco/Net/src/MailMessage.cpp
--- ../dnl3/poco/Net/src/MailMessage.cpp	2011-05-25 15:32:32.312500000 -0400
+++ poco/Net/src/MailMessage.cpp	2011-05-25 15:24:14.093750000 -0400
@@ -226,6 +226,22 @@ void MailMessage::addPart(const std::str
 	_parts.push_back(part);
 }
 
+void MailMessage::setPartHeader( const std::string& part, const std::string& name, const std::string& value)
+{
+	if ( !part.length() || !name.length() )
+		return;
+
+	for (PartVec::iterator it = _parts.begin(); it != _parts.end(); ++it)
+		if (part == it->name)
+		{	
+			if ( value.length() )
+				it->headers[ name ] = value;
+			else
+				it->headers.erase( name );
+
+			return;
+		}
+}
 
 void MailMessage::addContent(PartSource* pSource, ContentTransferEncoding encoding)
 {
@@ -335,6 +351,8 @@ void MailMessage::writePart(MultipartWri
 	}
 	else disposition = "inline";
 	partHeader.set(HEADER_CONTENT_DISPOSITION, disposition);
+	for (StringMap::const_iterator it = part.headers.begin(); it != part.headers.end(); ++it)
+		partHeader.set(it->first, it->second);
 	writer.nextPart(partHeader);
 	writeEncoded(part.pSource->stream(), writer.stream(), part.encoding);
 }
diff -rupwN -x .svn ../dnl3/poco/XML/src/xmlparse.cpp poco/XML/src/xmlparse.cpp
--- ../dnl3/poco/XML/src/xmlparse.cpp	2011-05-25 15:32:53.984375000 -0400
+++ poco/XML/src/xmlparse.cpp	2011-05-25 14:40:50.890625000 -0400
@@ -1475,7 +1475,7 @@ XML_Parse(XML_Parser parser, const char
   else if (bufferPtr == bufferEnd) {
     const char *end;
     int nLeftOver;
-    enum XML_Error result;
+    enum XML_Status result;
     parseEndByteIndex += len;
     positionPtr = s;
     ps_finalBuffer = (XML_Bool)isFinal;
